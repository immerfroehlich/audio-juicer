/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.4.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

apply plugin: 'eclipse'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven { url 'https://jitpack.io' }
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    //compile 'com.google.guava:guava:23.0'
    
    //Jitpack include github repository
    //implementation 'com.github.User:Repo:Tag'
    
    compile 'commons-io:commons-io:2.6'
    
    compile 'com.github.immerfroehlich:CommandExecutor:master-SNAPSHOT'
    compile 'com.github.academia-de-codigo:prompt-view:master-SNAPSHOT'
    
    compile files ('libdiscid-java-wrapper/native/build')
    compile files ('libdiscid-java-wrapper/build/libs/libdiscid-java-wrapper.jar')
    
    //Dependencies for Musicbrainz Service
    compile 'org.glassfish.jersey.core:jersey-client:2.29.1'
    compile 'org.glassfish.jersey.inject:jersey-hk2:2.29.1'
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.29.1'
    
    //Dependencies for Cover Art Archive
    compile 'fm.last:coverartarchive-api:2.1.1'
    
    //Dependencies for Mp3 tag manipulation
    //compile 'com.mpatric:mp3agic:0.9.1'
    	//Not needed at the moment as lame has the feature of image embedding that I use.
    //compile 'com.google.guava:guava:12'
    	//because 'Guava is needed for getting mime type as string - In MediaType class. This was first introduced in version 12.' 
    

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.+'
}

eclipse.classpath { containers "org.springsource.ide.eclipse.gradle.classpathcontainer" }
eclipse.classpath.file {
  withXml { xml ->
    def node = xml.asNode()
    def container = node.find { it.@path == 'org.springsource.ide.eclipse.gradle.classpathcontainer' }
   container.appendNode('attributes').appendNode('attribute', [name: 'org.eclipse.jdt.launching.CLASSPATH_ATTR_LIBRARY_PATH_ENTRY', value:"$project.name/libdiscid-java-wrapper/native/build"])
  }
}

applicationDefaultJvmArgs = ["-Djava.library.path=../lib/linux/amd64"]
// Define the main class for the application
//mainClassName = 'de.immerfroehlich.Main'
mainClassName = 'App'

/*
 * Execution phase configuration.
 */
tasks.compileJava.doFirst {
	println 'Do first in compileJava script called.'

	//Build the libdiscid Java Binding first.
	exec {
		workingDir 'libdiscid-java-wrapper'
        executable 'ant'
        args 'all'
    }
}